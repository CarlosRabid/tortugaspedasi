{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\benja\\\\Desktop\\\\Fullstack Bootcamp\\\\projects\\\\Tortuga Pedasi\\\\tortugaspedasi\\\\tortugaspedasi\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\benja\\\\Desktop\\\\Fullstack Bootcamp\\\\projects\\\\Tortuga Pedasi\\\\tortugaspedasi\\\\tortugaspedasi\\\\src\\\\Components\\\\Analytics\\\\DynamicChart.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { ComposedChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Line } from 'recharts';\nimport moment from 'moment';\nimport Axios from 'axios';\n\nclass DynamicChart extends Component {\n  constructor() {\n    super();\n\n    this.convertDate = (date, group) => {\n      let fd;\n      let newDate;\n\n      if (group === \"day\") {\n        console.log(date);\n        fd = date * (1000 * 60 * 60 * 24);\n        newDate = moment(fd).format(\"MMMM Do YYYY\");\n      } else if (group === \"month\") {\n        date = parseInt(date);\n        let addYear = Math.floor(date / 12);\n        let toMultiply = date % 12 / 12;\n        let year = 1970 + addYear;\n        let month = Math.ceil(toMultiply * 12) + 1;\n        newDate = month + \" \" + year;\n      } else if (group === \"year\") {\n        newDate = JSON.parse(date) + 1970;\n      } else if (group === \"week\") {\n        fd = date * (1000 * 60 * 60 * 24 * 7);\n        newDate = moment(fd).format('w YYYY');\n      }\n\n      return newDate;\n    };\n\n    this.getRelevantData = async () => {\n      let group = this.state.time;\n      let response = await Axios.get(\"http://localhost:7777/formData/\".concat(group));\n      this.setState({\n        data: response.data.map(d => {\n          return _objectSpread({}, d, {\n            moonPhase: this.getMoonphases(d.moonPhase),\n            date: this.convertDate(d.date, group)\n          });\n        })\n      });\n    };\n\n    this.handleChange = async e => {\n      let data = [...this.state.data];\n      let name = e.target.name;\n      let newData = data.splice(0); // Only for User Experience purposes (to force chart to reanimate)\n\n      await this.setState({\n        [name]: e.target.value,\n        data: newData\n      });\n      this.getRelevantData();\n    };\n\n    this.getMoonphases = data => {\n      let moonphase;\n\n      if (data === \"Full Moon\") {\n        return moonphase = 4;\n      } else if (data === \"Third Quarter\") {\n        return moonphase = 3;\n      } else if (data === \"New Moon\") {\n        return moonphase = 2;\n      } else if (data === \"First Quarter\") {\n        return moonphase = 1;\n      } else {\n        return moonphase = null;\n      }\n    };\n\n    this.state = {\n      data: [],\n      countBy: \"turtleCount\",\n      time: \"day\"\n    };\n  }\n\n  async componentDidMount() {\n    await this.getRelevantData();\n  }\n\n  render() {\n    let countOptions = [\"turtleCount\", \"nestCount\", \"eggCount\"];\n    let timeOptions = [\"day\", \"week\", \"month\", \"year\"];\n    let notShowingMoonPhases;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Count: \"), React.createElement(\"select\", {\n      id: \"countBy\",\n      name: \"countBy\",\n      value: this.state.countBy,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, countOptions.map(o => React.createElement(\"option\", {\n      value: o,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, o))), React.createElement(\"select\", {\n      id: \"time\",\n      name: \"time\",\n      value: this.state.time,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, timeOptions.map(o => React.createElement(\"option\", {\n      value: o,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, o))), React.createElement(ComposedChart, {\n      width: 600,\n      height: 300,\n      data: this.state.data,\n      margin: {\n        top: 20,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(XAxis, {\n      dataKey: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      yAxisId: \"left\",\n      orientation: \"left\",\n      stroke: \"#8884d8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), this.state.time === \"day\" ? React.createElement(YAxis, {\n      yAxisId: \"right\",\n      orientation: \"right\",\n      stroke: \"#82ca9d\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }) : notShowingMoonPhases = true, React.createElement(Tooltip, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(Legend, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Bar, {\n      yAxisId: \"left\",\n      dataKey: this.state.countBy,\n      fill: \"#8884d8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), this.state.time === \"day\" ? React.createElement(Line, {\n      type: \"monotone\",\n      yAxisId: \"right\",\n      dataKey: \"moonPhase\",\n      fill: \"#82ca9d\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }) : notShowingMoonPhases = true), this.state.time === \"day\" ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Legend: \"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"First Quarter\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"New Moon\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Third Quarter\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Full Moon\"))) : notShowingMoonPhases = true);\n  }\n\n}\n\nexport default DynamicChart;","map":{"version":3,"sources":["C:/Users/benja/Desktop/Fullstack Bootcamp/projects/Tortuga Pedasi/tortugaspedasi/tortugaspedasi/src/Components/Analytics/DynamicChart.js"],"names":["React","Component","ComposedChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Line","moment","Axios","DynamicChart","constructor","convertDate","date","group","fd","newDate","console","log","format","parseInt","addYear","Math","floor","toMultiply","year","month","ceil","JSON","parse","getRelevantData","state","time","response","get","setState","data","map","d","moonPhase","getMoonphases","handleChange","e","name","target","newData","splice","value","moonphase","countBy","componentDidMount","render","countOptions","timeOptions","notShowingMoonPhases","o","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { ComposedChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Line } from 'recharts';\r\nimport moment from 'moment'\r\nimport Axios from 'axios';\r\n\r\nclass DynamicChart extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            data: [],\r\n            countBy: \"turtleCount\",\r\n            time: \"day\",\r\n        }\r\n    }\r\n\r\n    convertDate = (date, group) => {\r\n        let fd\r\n        let newDate\r\n        if(group === \"day\"){\r\n            console.log(date)\r\n            fd = date * (1000 * 60 * 60 * 24)\r\n            newDate = moment(fd).format(\"MMMM Do YYYY\")\r\n        } else if (group === \"month\"){\r\n            date = parseInt(date)\r\n            let addYear = Math.floor(date/12)\r\n            let toMultiply = (date%12)/12\r\n            let year = 1970 + addYear\r\n            let month = (Math.ceil(toMultiply*12))+1\r\n            newDate = month + \" \" + year\r\n        } else if (group === \"year\"){\r\n            newDate = JSON.parse(date) + 1970\r\n        } else if(group ===\"week\"){\r\n            fd = date * (1000 * 60 * 60 * 24 * 7)\r\n            newDate = moment(fd).format('w YYYY')\r\n        }\r\n        return newDate\r\n    }\r\n\r\n    getRelevantData = async () => {\r\n        let group = this.state.time\r\n        let response = await Axios.get(`http://localhost:7777/formData/${group}`)\r\n        this.setState({\r\n            data: response.data.map(d => {\r\n                return { ...d, moonPhase: this.getMoonphases(d.moonPhase), date: this.convertDate(d.date, group)}\r\n            })\r\n        })\r\n    }\r\n    handleChange = async (e) => {\r\n        let data = [...this.state.data]\r\n        let name = e.target.name\r\n        let newData = data.splice(0) // Only for User Experience purposes (to force chart to reanimate)\r\n        await this.setState({ [name]: e.target.value, data: newData })\r\n        this.getRelevantData()\r\n    }\r\n\r\n    getMoonphases = (data) => {\r\n        let moonphase\r\n        if (data === \"Full Moon\") {\r\n            return moonphase = 4\r\n        } else if (data === \"Third Quarter\") {\r\n            return moonphase = 3\r\n        } else if (data === \"New Moon\") {\r\n            return moonphase = 2\r\n        } else if (data === \"First Quarter\") {\r\n            return moonphase = 1\r\n        } else {\r\n            return moonphase = null\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.getRelevantData()\r\n    }\r\n\r\n    render() {\r\n        let countOptions = [\"turtleCount\", \"nestCount\", \"eggCount\"]\r\n        let timeOptions = [\"day\", \"week\", \"month\", \"year\"]\r\n        let notShowingMoonPhases\r\n\r\n        return (\r\n            <div>\r\n                <h3>Count: </h3>\r\n                <select id=\"countBy\" name=\"countBy\" value={this.state.countBy} onChange={this.handleChange}>\r\n                    {countOptions.map(o => <option value={o}>{o}</option>)}\r\n                </select>\r\n                <select id=\"time\" name=\"time\" value={this.state.time} onChange={this.handleChange}>\r\n                    {timeOptions.map(o => <option value={o}>{o}</option>)}\r\n                </select>\r\n\r\n                <ComposedChart width={600} height={300} data={this.state.data}\r\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n\r\n                    <XAxis dataKey=\"date\" />\r\n                    <YAxis yAxisId=\"left\" orientation=\"left\" stroke=\"#8884d8\" />\r\n                    {this.state.time === \"day\" ?\r\n                        <YAxis yAxisId=\"right\" orientation=\"right\" stroke=\"#82ca9d\" />\r\n                        : notShowingMoonPhases = true\r\n                    }\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Bar yAxisId=\"left\" dataKey={this.state.countBy} fill=\"#8884d8\" />\r\n                    {this.state.time === \"day\" ?\r\n                        <Line type=\"monotone\" yAxisId=\"right\" dataKey=\"moonPhase\" fill=\"#82ca9d\" />\r\n                        \r\n                        : notShowingMoonPhases = true\r\n                    }\r\n                </ComposedChart>\r\n                {this.state.time === \"day\" ?\r\n                    <div>\r\n                        <div>Legend: </div>\r\n                        <ol>\r\n                            <li>First Quarter</li>\r\n                            <li>New Moon</li>\r\n                            <li>Third Quarter</li>\r\n                            <li>Full Moon</li>\r\n                        </ol>\r\n                    </div>\r\n                    : notShowingMoonPhases = true\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DynamicChart;"]},"metadata":{},"sourceType":"module"}