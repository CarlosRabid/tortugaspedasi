{"ast":null,"code":"import config from 'config';\nimport { authHeader } from './Auth-header';\nexport const userService = {\n  login,\n  logout,\n  getAll\n};\n\nfunction login(username, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  };\n  return fetch(\"\".concat(config.apiUrl, \"/users/authenticate\"), requestOptions).then(handleResponse).then(user => {\n    // login successful if there's a user in the response\n    if (user) {\n      // store user details and basic auth credentials in local storage \n      // to keep user logged in between page refreshes\n      user.authdata = window.btoa(username + ':' + password);\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(\"\".concat(config.apiUrl, \"/users\"), requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); //location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["C:/Users/benja/Desktop/Fullstack Bootcamp/projects/Tortuga Pedasi/tortugaspedasi/tortugaspedasi/src/Components/LogIn/User-service.js"],"names":["config","authHeader","userService","login","logout","getAll","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","apiUrl","then","handleResponse","user","authdata","window","btoa","localStorage","setItem","removeItem","response","text","data","parse","ok","status","error","message","statusText","Promise","reject"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA,MAFuB;AAGvBC,EAAAA;AAHuB,CAApB;;AAMP,SAASF,KAAT,CAAeG,QAAf,EAAyBC,QAAzB,EAAmC;AAC/B,QAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAf;AAHa,GAAvB;AAMA,SAAOO,KAAK,WAAId,MAAM,CAACe,MAAX,0BAAwCP,cAAxC,CAAL,CACFQ,IADE,CACGC,cADH,EAEFD,IAFE,CAEGE,IAAI,IAAI;AACV;AACA,QAAIA,IAAJ,EAAU;AACN;AACA;AACAA,MAAAA,IAAI,CAACC,QAAL,GAAgBC,MAAM,CAACC,IAAP,CAAYf,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAhB;AACAe,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BX,IAAI,CAACC,SAAL,CAAeK,IAAf,CAA7B;AACH;;AAED,WAAOA,IAAP;AACH,GAZE,CAAP;AAaH;;AAED,SAASd,MAAT,GAAkB;AACd;AACAkB,EAAAA,YAAY,CAACE,UAAb,CAAwB,MAAxB;AACH;;AAED,SAASnB,MAAT,GAAkB;AACd,QAAMG,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,KADW;AAEnBC,IAAAA,OAAO,EAAET,UAAU;AAFA,GAAvB;AAKA,SAAOa,KAAK,WAAId,MAAM,CAACe,MAAX,aAA2BP,cAA3B,CAAL,CAAgDQ,IAAhD,CAAqDC,cAArD,CAAP;AACH;;AAED,SAASA,cAAT,CAAwBQ,QAAxB,EAAkC;AAC9B,SAAOA,QAAQ,CAACC,IAAT,GAAgBV,IAAhB,CAAqBU,IAAI,IAAI;AAChC,UAAMC,IAAI,GAAGD,IAAI,IAAId,IAAI,CAACgB,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACI,EAAd,EAAkB;AACd,UAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACA1B,QAAAA,MAAM,GAFmB,CAGzB;AACH;;AAED,YAAM2B,KAAK,GAAIJ,IAAI,IAAIA,IAAI,CAACK,OAAd,IAA0BP,QAAQ,CAACQ,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,WAAOJ,IAAP;AACH,GAdM,CAAP;AAeH","sourcesContent":["import config from 'config';\r\nimport { authHeader } from './Auth-header';\r\n\r\nexport const userService = {\r\n    login,  \r\n    logout,\r\n    getAll\r\n};\r\n\r\nfunction login(username, password) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password })\r\n    };\r\n\r\n    return fetch(`${config.apiUrl}/users/authenticate`, requestOptions)\r\n        .then(handleResponse)\r\n        .then(user => {\r\n            // login successful if there's a user in the response\r\n            if (user) {\r\n                // store user details and basic auth credentials in local storage \r\n                // to keep user logged in between page refreshes\r\n                user.authdata = window.btoa(username + ':' + password);\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n            }\r\n\r\n            return user;\r\n        });\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction getAll() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`${config.apiUrl}/users`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                //location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return data;\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}