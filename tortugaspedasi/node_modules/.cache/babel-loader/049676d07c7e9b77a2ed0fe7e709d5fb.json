{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\benja\\\\Desktop\\\\Fullstack Bootcamp\\\\projects\\\\Tortuga Pedasi\\\\tortugaspedasi\\\\tortugaspedasi\\\\src\\\\Components\\\\Form\\\\ObservationInput.js\";\nimport React, { Component } from 'react';\n\nclass ObservationInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInput = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      }, () => console.log(this.state));\n    };\n\n    this.addShift = () => {\n      this.props.addShift(this.state.firstName, this.state.lastName, this.state.date);\n    };\n\n    this.state = {\n      time: \"\",\n      location: \"\",\n      moonPhase: \"\",\n      tide: \"\",\n      comments: \"\"\n    };\n  }\n\n  getPosition() {\n    function geoSucess(position) {\n      let geoCoords = {\n        lat: position.coords.latitude,\n        long: position.coords.longitude\n      }; // alert(`This are your coordinates: - Latitude: ${geoCoords.lat} - Longitude: ${geoCoords.long}`)\n\n      return geoCoords;\n    }\n\n    function geoError(errorPosition) {\n      alert(\"Error - Not position available\");\n    }\n\n    const geoOptions = {\n      enableHighAccuracy: true,\n      maximumAge: 0,\n      timeout: 25000\n    };\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(geoSucess, geoError, geoOptions);\n      console.log(\"True\");\n    } else {\n      console.log(\"Geolocation not enable in this device\");\n    }\n  }\n\n  render() {\n    let input = [\"Time\", \"Location\", \"Moonphase\", \"Tide\", \"Comments\"];\n    return React.createElement(\"div\", {\n      className: \"observation-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Observation\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"button\",\n      onClick: this.getPosition,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Click here to know your position\")), React.createElement(\"div\", {\n      className: \"observation-component\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, input.map(i => React.createElement(\"div\", {\n      className: \"new-observation-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"new-observation-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \" \", i, \": \"), React.createElement(\"input\", {\n      className: \"searchInput underline new-observation-2\",\n      name: i,\n      onChange: this.handleInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default ObservationInput;","map":{"version":3,"sources":["C:/Users/benja/Desktop/Fullstack Bootcamp/projects/Tortuga Pedasi/tortugaspedasi/tortugaspedasi/src/Components/Form/ObservationInput.js"],"names":["React","Component","ObservationInput","constructor","props","handleInput","event","setState","target","name","value","console","log","state","addShift","firstName","lastName","date","time","location","moonPhase","tide","comments","getPosition","geoSucess","position","geoCoords","lat","coords","latitude","long","longitude","geoError","errorPosition","alert","geoOptions","enableHighAccuracy","maximumAge","timeout","navigator","geolocation","getCurrentPosition","render","input","map","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nclass ObservationInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            time: \"\",\r\n            location: \"\",\r\n            moonPhase: \"\",\r\n            tide: \"\",\r\n            comments: \"\"\r\n         }\r\n    }\r\n\r\n    handleInput = (event) => {\r\n        this.setState({[event.target.name]: event.target.value}, ()=>console.log(this.state))\r\n    }\r\n    addShift = () => {\r\n        this.props.addShift(this.state.firstName, this.state.lastName, this.state.date)\r\n    }\r\n\r\n    getPosition() {\r\n        function geoSucess(position){\r\n          let geoCoords= {\r\n            lat:position.coords.latitude,\r\n            long:position.coords.longitude\r\n          }\r\n          // alert(`This are your coordinates: - Latitude: ${geoCoords.lat} - Longitude: ${geoCoords.long}`)\r\n          return(geoCoords)\r\n        }\r\n    \r\n        function geoError(errorPosition){\r\n            alert(\"Error - Not position available\")\r\n        }\r\n    \r\n        const geoOptions={\r\n            enableHighAccuracy: true,\r\n            maximumAge: 0,\r\n            timeout: 25000\r\n        }\r\n        \r\n        if(navigator.geolocation){\r\n          navigator.geolocation.getCurrentPosition(geoSucess, geoError,geoOptions );\r\n          console.log(\"True\")\r\n        }else{\r\n          console.log(\"Geolocation not enable in this device\")\r\n    \r\n        }\r\n      }\r\n  \r\n\r\n\r\n    render() {\r\n        let input = [\"Time\", \"Location\", \"Moonphase\", \"Tide\", \"Comments\"]\r\n        return (\r\n            <div className=\"observation-container\">\r\n                <h2>Observation</h2>\r\n                <div>\r\n                    <button id=\"button\" onClick={this.getPosition}>Click here to know your position</button>\r\n                </div>\r\n                <div className=\"observation-component\">\r\n                    {input.map((i) => <div className=\"new-observation-grid\">\r\n                        <span className=\"new-observation-1\"> {i}: </span>\r\n                        <input className=\"searchInput underline new-observation-2\"\r\n                            name={i} onChange={this.handleInput}></input>\r\n\r\n                    </div>\r\n                    )}\r\n                    \r\n\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n \r\nexport default ObservationInput;"]},"metadata":{},"sourceType":"module"}