{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\benja\\\\Desktop\\\\Fullstack Bootcamp\\\\projects\\\\Tortuga Pedasi\\\\tortugaspedasi\\\\tortugaspedasi\\\\src\\\\Components\\\\Analytics\\\\ChartFilters.js\";\nimport React, { Component } from 'react';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nclass ChartFilters extends Component {\n  constructor() {\n    super();\n\n    this.removeEmptyFilters = filters => {\n      const names = Object.keys(filters);\n\n      for (let name of names) {\n        if (filters[name].length === 0) {\n          delete filters[name];\n        }\n      }\n    };\n\n    this.extractFilters = () => {\n      const species = [\"Cc\", \"Lo\", \"Cm\", \"Ei\", \"Dc\"];\n      const tides = [\"high\", \"high-to-low\", \"low\", \"low-to-high\"];\n      const genders = [\"male\", \"female\"];\n      const filters = {\n        \"turtle.species\": [],\n        \"observation.tide\": [],\n        \"turtle.gender\": []\n      };\n      species.forEach(s => this.state[s] ? filters[\"turtle.species\"].push(s) : null);\n      tides.forEach(t => this.state[t] ? filters[\"observation.tide\"].push(t) : null);\n      genders.forEach(g => this.state[g] ? filters[\"turtle.gender\"].push(g) : null);\n      this.removeEmptyFilters(filters);\n      return filters;\n    };\n\n    this.handleChange = async e => {\n      if (this.state[e.target.value]) {\n        await this.setState({\n          [e.target.name]: null\n        });\n      } else {\n        await this.setState({\n          [e.target.name]: e.target.value\n        });\n      }\n\n      const filters = this.extractFilters();\n      this.props.getRelevantData(filters);\n    };\n\n    this.createCheckMark = info => {\n      return React.createElement(FormControlLabel, {\n        control: React.createElement(Checkbox, {\n          name: info.value,\n          color: info.color,\n          checked: this.state[info.value],\n          onChange: this.handleChange,\n          value: info.value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }),\n        label: info.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      });\n    };\n\n    this.getCheckMarks = filter => {\n      const green = \"primary\";\n      const blue = \"secondary\";\n      const pink = \"pink\";\n      const filters = {\n        species: [{\n          label: \"Caretta Caretta\",\n          value: \"Cc\",\n          color: green\n        }, {\n          label: \"Lepidochelys Olivacea\",\n          value: \"Lo\",\n          color: green\n        }, {\n          label: \"Chelonia Mydas\",\n          value: \"Cm\",\n          color: green\n        }, {\n          label: \"Eretmochelys imbricata\",\n          value: \"Ei\",\n          color: green\n        }, {\n          label: \"Dermochelys coriacea\",\n          value: \"Dc\",\n          color: green\n        }],\n        tides: [{\n          label: \"High\",\n          value: \"high\",\n          color: blue\n        }, {\n          label: \"High to Low\",\n          value: \"high-to-low\",\n          color: blue\n        }, {\n          label: \"Low\",\n          value: \"low\",\n          color: blue\n        }, {\n          label: \"Low to High\",\n          value: \"low-to-high\",\n          color: blue\n        }],\n        gender: [{\n          label: \"Male\",\n          value: \"male\",\n          color: pink\n        }, {\n          label: \"Female\",\n          value: \"female\",\n          color: pink\n        }]\n      };\n      const checkmarks = [];\n\n      for (let info of filters[filter]) {\n        checkmarks.push(this.createCheckMark(info));\n      }\n\n      return checkmarks;\n    };\n\n    this.state = {};\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"chart-filters\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Filters\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, [\"species\", \"tides\", \"gender\"].map(filter => React.createElement(FormGroup, {\n      row: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"filter-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, filter.toUpperCase()), React.createElement(\"div\", {\n      className: \"chart-checkboxes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.getCheckMarks(filter)))))));\n  }\n\n}\n\nexport default ChartFilters;","map":{"version":3,"sources":["C:/Users/benja/Desktop/Fullstack Bootcamp/projects/Tortuga Pedasi/tortugaspedasi/tortugaspedasi/src/Components/Analytics/ChartFilters.js"],"names":["React","Component","FormGroup","FormControlLabel","Checkbox","ChartFilters","constructor","removeEmptyFilters","filters","names","Object","keys","name","length","extractFilters","species","tides","genders","forEach","s","state","push","t","g","handleChange","e","target","value","setState","props","getRelevantData","createCheckMark","info","color","label","getCheckMarks","filter","green","blue","pink","gender","checkmarks","render","map","toUpperCase"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nclass ChartFilters extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {}\r\n    }\r\n\r\n    removeEmptyFilters = (filters) => {\r\n        const names = Object.keys(filters)\r\n        for (let name of names) {\r\n            if (filters[name].length === 0) {\r\n                delete filters[name]\r\n            }\r\n        }\r\n    }\r\n\r\n    extractFilters = () => {\r\n        const species = [\"Cc\", \"Lo\", \"Cm\", \"Ei\", \"Dc\"]\r\n        const tides = [\"high\", \"high-to-low\", \"low\", \"low-to-high\"]\r\n        const genders = [\"male\", \"female\"]\r\n\r\n        const filters = { \"turtle.species\": [], \"observation.tide\": [], \"turtle.gender\": [] }\r\n\r\n        species.forEach(s => this.state[s] ? filters[\"turtle.species\"].push(s) : null)\r\n        tides.forEach(t => this.state[t] ? filters[\"observation.tide\"].push(t) : null)\r\n        genders.forEach(g => this.state[g] ? filters[\"turtle.gender\"].push(g) : null)\r\n\r\n        this.removeEmptyFilters(filters)\r\n        return filters\r\n    }\r\n\r\n    handleChange = async (e) => {\r\n        if (this.state[e.target.value]) {\r\n            await this.setState({ [e.target.name]: null })\r\n        }\r\n        else {\r\n            await this.setState({ [e.target.name]: e.target.value })\r\n        }\r\n\r\n        const filters = this.extractFilters()\r\n        this.props.getRelevantData(filters)\r\n    }\r\n\r\n    createCheckMark = info => {\r\n        return <FormControlLabel\r\n            control={\r\n                <Checkbox name={info.value}\r\n                    color={info.color} checked={this.state[info.value]}\r\n                    onChange={this.handleChange} value={info.value} />}\r\n            label={info.label}\r\n        />\r\n    }\r\n\r\n    getCheckMarks = (filter) => {\r\n        const green = \"primary\"\r\n        const blue = \"secondary\"\r\n        const pink = \"pink\"\r\n\r\n        const filters = {\r\n            species: [\r\n                { label: \"Caretta Caretta\", value: \"Cc\", color: green },\r\n                { label: \"Lepidochelys Olivacea\", value: \"Lo\", color: green },\r\n                { label: \"Chelonia Mydas\", value: \"Cm\", color: green },\r\n                { label: \"Eretmochelys imbricata\", value: \"Ei\", color: green },\r\n                { label: \"Dermochelys coriacea\", value: \"Dc\", color: green }\r\n            ],\r\n            tides: [\r\n                { label: \"High\", value: \"high\", color: blue },\r\n                { label: \"High to Low\", value: \"high-to-low\", color: blue },\r\n                { label: \"Low\", value: \"low\", color: blue },\r\n                { label: \"Low to High\", value: \"low-to-high\", color: blue },\r\n            ],\r\n            gender: [\r\n                { label: \"Male\", value: \"male\", color: pink },\r\n                { label: \"Female\", value: \"female\", color: pink },\r\n            ]\r\n        }\r\n\r\n        const checkmarks = []\r\n\r\n        for (let info of filters[filter]) {\r\n            checkmarks.push(this.createCheckMark(info))\r\n        }\r\n\r\n        return checkmarks\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart-filters\">\r\n                <span>Filters</span>\r\n                <div>\r\n                    {[\"species\", \"tides\", \"gender\"].map(filter => (\r\n                        <FormGroup row >\r\n                            <div className=\"filter-group\">\r\n                                <span>{filter.toUpperCase()}</span>\r\n                                <div className=\"chart-checkboxes\">{this.getCheckMarks(filter)}</div>\r\n                            </div>\r\n                        </FormGroup>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChartFilters;"]},"metadata":{},"sourceType":"module"}