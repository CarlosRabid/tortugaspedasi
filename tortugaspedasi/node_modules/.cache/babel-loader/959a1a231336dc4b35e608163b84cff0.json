{"ast":null,"code":"// Flag for enabling cache in production\nvar doCache = false;\nvar CACHE_NAME = 'pwa-app-cache'; // Delete old caches\n\nwindow.self.addEventListener('activate', event => {\n  const currentCachelist = [CACHE_NAME];\n  event.waitUntil(caches.keys().then(keyList => Promise.all(keyList.map(key => {\n    if (!currentCachelist.includes(key)) {\n      return caches.delete(key);\n    }\n  }))));\n}); // This triggers when user starts the app\n\nwindow.self.addEventListener('install', function (event) {\n  if (doCache) {\n    event.waitUntil(caches.open(CACHE_NAME).then(function (cache) {\n      fetch('asset-manifest.json', 'App.js').then(response => {\n        response.json();\n      }).then(assets => {\n        // We will cache initial page and the main.js\n        // We could also cache assets like CSS and images\n        const urlsToCache = ['/', assets['main.js']];\n        cache.addAll(urlsToCache);\n      });\n    }));\n  }\n}); // Here we intercept request and serve up the matching files\n\nwindow.self.addEventListener('fetch', function (event) {\n  if (doCache) {\n    event.respondWith(caches.match(event.request).then(function (response) {\n      return response || fetch(event.request);\n    }));\n  }\n});\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/benja/Desktop/Fullstack Bootcamp/projects/Tortuga Pedasi/tortugaspedasi/tortugaspedasi/src/Worker.js"],"names":["doCache","CACHE_NAME","window","self","addEventListener","event","currentCachelist","waitUntil","caches","keys","then","keyList","Promise","all","map","key","includes","delete","open","cache","fetch","response","json","assets","urlsToCache","addAll","respondWith","match","request","unregister","navigator","serviceWorker","ready","registration"],"mappings":"AAAA;AACA,IAAIA,OAAO,GAAG,KAAd;AACA,IAAIC,UAAU,GAAG,eAAjB,C,CAAiC;;AAEjCC,MAAM,CAACC,IAAP,CAAYC,gBAAZ,CAA6B,UAA7B,EAAyCC,KAAK,IAAI;AAChD,QAAMC,gBAAgB,GAAG,CAACL,UAAD,CAAzB;AACAI,EAAAA,KAAK,CAACE,SAAN,CACEC,MAAM,CAACC,IAAP,GACGC,IADH,CACQC,OAAO,IACXC,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,GAAR,CAAYC,GAAG,IAAI;AAC7B,QAAI,CAACT,gBAAgB,CAACU,QAAjB,CAA0BD,GAA1B,CAAL,EAAqC;AACnC,aAAOP,MAAM,CAACS,MAAP,CAAcF,GAAd,CAAP;AACD;AACF,GAJW,CAAZ,CAFJ,CADF;AAUD,CAZD,E,CAYG;;AACHb,MAAM,CAACC,IAAP,CAAYC,gBAAZ,CAA6B,SAA7B,EAAwC,UAASC,KAAT,EAAgB;AACtD,MAAIL,OAAJ,EAAa;AACXK,IAAAA,KAAK,CAACE,SAAN,CACEC,MAAM,CAACU,IAAP,CAAYjB,UAAZ,EACGS,IADH,CACQ,UAASS,KAAT,EAAgB;AACpBC,MAAAA,KAAK,CAAC,qBAAD,EAAwB,QAAxB,CAAL,CACGV,IADH,CACQW,QAAQ,IAAI;AAChBA,QAAAA,QAAQ,CAACC,IAAT;AACD,OAHH,EAIGZ,IAJH,CAIQa,MAAM,IAAI;AACd;AACA;AACA,cAAMC,WAAW,GAAG,CAClB,GADkB,EAElBD,MAAM,CAAC,SAAD,CAFY,CAApB;AAIAJ,QAAAA,KAAK,CAACM,MAAN,CAAaD,WAAb;AACD,OAZH;AAaD,KAfH,CADF;AAkBD;AACF,CArBD,E,CAqBG;;AACHtB,MAAM,CAACC,IAAP,CAAYC,gBAAZ,CAA6B,OAA7B,EAAsC,UAASC,KAAT,EAAgB;AACpD,MAAIL,OAAJ,EAAa;AACXK,IAAAA,KAAK,CAACqB,WAAN,CACElB,MAAM,CAACmB,KAAP,CAAatB,KAAK,CAACuB,OAAnB,EAA4BlB,IAA5B,CAAiC,UAASW,QAAT,EAAmB;AAClD,aAAOA,QAAQ,IAAID,KAAK,CAACf,KAAK,CAACuB,OAAP,CAAxB;AACD,KAFD,CADF;AAKD;AACF,CARD;AAUA,OAAO,SAASC,UAAT,GAAsB;AAC3B,MAAI,mBAAmBC,SAAvB,EAAkC;AAChCA,IAAAA,SAAS,CAACC,aAAV,CAAwBC,KAAxB,CAA8BtB,IAA9B,CAAmCuB,YAAY,IAAI;AACjDA,MAAAA,YAAY,CAACJ,UAAb;AACD,KAFD;AAGD;AACF","sourcesContent":["// Flag for enabling cache in production\r\nvar doCache = false;\r\nvar CACHE_NAME = 'pwa-app-cache';// Delete old caches\r\n\r\nwindow.self.addEventListener('activate', event => {\r\n  const currentCachelist = [CACHE_NAME];\r\n  event.waitUntil(\r\n    caches.keys()\r\n      .then(keyList =>\r\n        Promise.all(keyList.map(key => {\r\n          if (!currentCachelist.includes(key)) {\r\n            return caches.delete(key);\r\n          }\r\n        }))\r\n      )\r\n  );\r\n});// This triggers when user starts the app\r\nwindow.self.addEventListener('install', function(event) {\r\n  if (doCache) {\r\n    event.waitUntil(\r\n      caches.open(CACHE_NAME)\r\n        .then(function(cache) {\r\n          fetch('asset-manifest.json', 'App.js')\r\n            .then(response => {\r\n              response.json();\r\n            })\r\n            .then(assets => {\r\n              // We will cache initial page and the main.js\r\n              // We could also cache assets like CSS and images\r\n              const urlsToCache = [\r\n                '/',\r\n                assets['main.js']\r\n              ];\r\n              cache.addAll(urlsToCache);\r\n            })\r\n        })\r\n    );\r\n  }\r\n});// Here we intercept request and serve up the matching files\r\nwindow.self.addEventListener('fetch', function(event) {\r\n  if (doCache) {\r\n    event.respondWith(\r\n      caches.match(event.request).then(function(response) {\r\n        return response || fetch(event.request);\r\n      })\r\n    );\r\n  }\r\n});\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}