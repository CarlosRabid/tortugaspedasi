{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\benja\\\\Desktop\\\\Fullstack Bootcamp\\\\projects\\\\Tortuga Pedasi\\\\tortugaspedasi\\\\tortugaspedasi\\\\src\\\\Components\\\\Form\\\\ObservationInput.js\";\nimport React, { Component } from 'react';\n\nclass ObservationInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInput = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      }, () => console.log(this.state));\n    };\n\n    this.addShift = () => {\n      this.props.addShift(this.state.time, this.state.location, this.state.moonPhase, this.state.tide, this.state.comments);\n    };\n\n    this.state = {\n      time: \"\",\n      git: \"\",\n      moonPhase: \"\",\n      tide: \"\",\n      comments: \"\"\n    };\n  }\n\n  getPosition() {\n    function geoSucess(position) {\n      let geoCoords = {\n        lat: position.coords.latitude,\n        long: position.coords.longitude\n      };\n      alert(\"This are your coordinates: - Latitude: \".concat(geoCoords.lat, \" - Longitude: \").concat(geoCoords.long));\n      return geoCoords;\n    }\n\n    function geoError(errorPosition) {\n      alert(\"Error - Not position available\");\n    }\n\n    const geoOptions = {\n      enableHighAccuracy: true,\n      maximumAge: 0,\n      timeout: 25000\n    };\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(geoSucess, geoError, geoOptions);\n      console.log(\"True\");\n    } else {\n      console.log(\"Geolocation not enable in this device\");\n    }\n  }\n\n  render() {\n    let input = [{\n      formName: \"Time\",\n      stateName: \"time\"\n    }, {\n      formName: \"Location\",\n      stateName: \"location\"\n    }, {\n      formName: \"Moonphase\",\n      stateName: \"moonPhase\"\n    }, {\n      formName: \"Tide\",\n      stateName: \"tide\"\n    }, {\n      formName: \"Comments\",\n      stateName: \"moonPhase\"\n    }];\n    return React.createElement(\"div\", {\n      className: \"observation-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Observation\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"button\",\n      onClick: this.getPosition,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Click here to know your position\")), React.createElement(\"div\", {\n      className: \"observation-component\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, input.map(i => React.createElement(\"div\", {\n      className: \"new-observation-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"new-observation-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \" \", i.formName, \": \"), React.createElement(\"input\", {\n      className: \"searchInput underline new-observation-2\",\n      name: i.stateName,\n      onChange: this.handleInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default ObservationInput;","map":{"version":3,"sources":["C:/Users/benja/Desktop/Fullstack Bootcamp/projects/Tortuga Pedasi/tortugaspedasi/tortugaspedasi/src/Components/Form/ObservationInput.js"],"names":["React","Component","ObservationInput","constructor","props","handleInput","event","setState","target","name","value","console","log","state","addShift","time","location","moonPhase","tide","comments","git","getPosition","geoSucess","position","geoCoords","lat","coords","latitude","long","longitude","alert","geoError","errorPosition","geoOptions","enableHighAccuracy","maximumAge","timeout","navigator","geolocation","getCurrentPosition","render","input","formName","stateName","map","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nclass ObservationInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            time: \"\",\r\n            git : \"\",\r\n            moonPhase: \"\",\r\n            tide: \"\",\r\n            comments: \"\"\r\n        }\r\n    }\r\n\r\n    handleInput = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value }, () => console.log(this.state))\r\n    }\r\n    addShift = () => {\r\n        this.props.addShift(this.state.time, this.state.location, this.state.moonPhase, this.state.tide, this.state.comments)\r\n    }\r\n\r\n    getPosition() {\r\n        function geoSucess(position) {\r\n            let geoCoords = {\r\n                lat: position.coords.latitude,\r\n                long: position.coords.longitude\r\n            }\r\n            alert(`This are your coordinates: - Latitude: ${geoCoords.lat} - Longitude: ${geoCoords.long}`)\r\n            return (geoCoords)\r\n        }\r\n\r\n        function geoError(errorPosition) {\r\n            alert(\"Error - Not position available\")\r\n        }\r\n\r\n        const geoOptions = {\r\n            enableHighAccuracy: true,\r\n            maximumAge: 0,\r\n            timeout: 25000\r\n        }\r\n\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(geoSucess, geoError, geoOptions);\r\n            console.log(\"True\")\r\n        } else {\r\n            console.log(\"Geolocation not enable in this device\")\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let input = [{formName:\"Time\", stateName: \"time\"}, {formName:\"Location\", stateName: \"location\"} , {formName:\"Moonphase\", stateName: \"moonPhase\"}, {formName:\"Tide\", stateName: \"tide\"},{formName:\"Comments\", stateName: \"moonPhase\"} ]\r\n        return (\r\n            <div className=\"observation-container\">\r\n                <h2>Observation</h2>\r\n                <div>\r\n                    <button id=\"button\" onClick={this.getPosition}>Click here to know your position</button>\r\n                </div>\r\n                <div className=\"observation-component\">\r\n                    {input.map((i) => <div className=\"new-observation-grid\">\r\n                        <span className=\"new-observation-1\"> {i.formName}: </span>\r\n                        <input className=\"searchInput underline new-observation-2\"\r\n                            name={i.stateName} onChange={this.handleInput}></input>\r\n\r\n                    </div>\r\n                    )}\r\n                    \r\n\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n \r\nexport default ObservationInput;"]},"metadata":{},"sourceType":"module"}